# -*- coding: utf-8 -*-
"""heartDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ZSogeaf2jMEafV1jt1viANP60BIzHag
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib
import matplotlib.pyplot as plt

"""Data collection and processing"""

#loading ths csv data to pandas dataframe
heart_data = pd.read_csv('/content/heart.csv')

#print first 5 rows of the dataset
heart_data.head()

#print the last 5
heart_data.tail()

#no. of rows and colomns
heart_data.shape

heart_data.info()

heart_data.isnull().sum()

# transform data to numeric to enable further analysis
heart_data = heart_data.apply(pd.to_numeric)
heart_data.dtypes

# statistical
heart_data.describe()

# plot histograms for each variable
heart_data.hist(figsize = (12, 12))
plt.show()

pd.crosstab(heart_data.age,heart_data.target).plot(kind="bar",figsize=(20,6))
plt.title('Heart Disease Frequency for Ages')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

#checking the distribution
heart_data['target'].value_counts()

"""1-->Have disease
0--> Dont
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting my data into train data and test"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify = Y, random_state=2)

print(X.shape , X_train.shape, X_test.shape)

"""Model

Logestic regression
"""

model = LogisticRegression()

#training the LR model with traing data
model.fit(X_train, Y_train)

"""Model evaluation

Accuracy score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data: ', training_data_accuracy)

#accuracy on training data
X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data: ', testing_data_accuracy)

"""Predicting sys."""

input_data = (45,1,2,123,221,0,0,145,0,0.4,1,1,3)

## changing input to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]== 0):
  print("The person does not have heart disease")
else:
  print("The person has heart disease")

